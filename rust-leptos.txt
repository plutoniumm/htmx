

#-# Cargo.toml
[package]
name = "rust-leptos"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
actix-files = "0.6.2"
actix-web = "4.4.0"
leptos = "0.5.1"
leptos_actix = "0.5.1"


#-# index.html
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <title>HTMX / Rust (same-thing)</title>

  <script src="https://htmx.org/js/htmx.js"></script>
  <link rel="stylesheet" href="/assets/global.css">
</head>

<body>
  <div class="card">
    <img class="wbg" src="/assets/logo.svg" height="150px" width="150px" alt="htmx logo">
    <div>
      <h4 style="margin: 0;">htmx / skill-issue (same thing)</h4>
      <p style="margin-bottom: 0;">htmx is a javascript library that allows you to access AJAX, WebSockets and Server
        Sent Events directly in
        HTML, using attributes</p>

      <br />
      <button hx-get="/details" hx-swap="innerHTML" hx-target="#details"
        style="border-radius: 5px;background:#47d;color:#fff;border:0;padding: 7px;">Read
        More</button>
    </div>
  </div>

  <div id="details" style="width: min(600px, 100%);margin: 10px auto;"></div>
</body>

</html>

#-# .gitignore
# Generated by Cargo
# will have compiled files and executables
/target/
pkg

# These are backup files generated by rustfmt
**/*.rs.bk

# node e2e test tools and outputs
node_modules/
test-results/
end2end/playwright-report/
playwright/.cache/

#-# assets/global.css
body {
  font: 300 18px Helvetica;
}

.card {
  width: min(600px, calc(100% - 20px));
  background: linear-gradient(90deg, #ccc 0%, #eee 100%);
  display: flex;
  border-radius: 10px;
  padding: 15px;
  margin: 10px auto;
}

.wbg {
  background: #fff;
  border-radius: 10px;
  margin-right: 12px;
}

ul {
  list-style: none;
  padding: 0;
  display: flex;
  justify-content: space-around;
}

li {
  margin: 5px;
  padding: 7px;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  text-align: center;
  justify-content: space-between
}

li img {
  width: 100px;
  height: 100px;
  margin-bottom: 7px;
  border-radius: 50px;
}

#-# assets/logo.svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 171 159.9" font-size="75" font-family="Helvetica">
  <path fill="#47d" d="m 112 77 m -81 -59.1 v 110.6 h 122 v -110.5 z m 117.3 105.9 h -112.5 v -101.2 h 112.5 z m -125.7 13.1 v -110.7 l -4.7 4.8 v 110.7 h 122 l 4.8 -4.8 z"/>
  <text fill="#888" x="37.5" y="95">&lt; &gt;</text>
  <text fill="#47d" x="81.5" y="101">/</text>
</svg>

#-# src/main.rs
use actix_files::{Files, NamedFile};

use actix_web::http::header::ContentType;
// ive done * so its easier to get started,
// narrow them down as the application is ready for prod
use actix_web::*;
use leptos::*;
use std::env;

async fn index(_req: HttpRequest) -> Result<NamedFile> {
    return Ok(NamedFile::open("index.html")?);
}

// leptos /details render
#[get("/details")]
async fn deets(_req: HttpRequest) -> HttpResponse {
    let data = [
        ("Rust", "https://doc.rust-lang.org/std/", "https://i.imgur.com/vIsMwPx.png"),
        ("HTMX", "https://htmx.org/docs", "https://htmx.org/img/htmx_logo.2.png"),
        ("Actix", "https://actix.rs/docs", "https://actix.rs/img/logo.png"),
        ("Leptos", "https://leptos-rs.github.io/leptos/", "https://leptos.dev/images/leptos_circle.svg"),
    ];

    let html = leptos::ssr::render_to_string(move || {
        return view! {
            <h3 style="text-align:center;">"Welcome to HTMX!"</h3>
            <p>"You're using these tools, check their docs to learn more:"</p>
            <ul>
            {
                data.into_iter()
                .map(|item| view! {
                    <li>
                        <img src={item.2} />
                        <a href={item.1}>{item.0}</a>
                    </li>
                })
                .collect::<Vec<_>>()
            }
            </ul>
        };
    }).into_owned();

    return HttpResponse::Ok()
        .content_type(ContentType::html())
        .body(html);
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    let args: Vec<String> = env::args().collect();
    let port = &args[1];
    let port: u16 = port.parse().unwrap();

    println!("Starting server on port {}", port);

    return HttpServer::new(||
        App::new()
        .route("/", web::get().to(index))
        .service(deets)
        .service(Files::new("/assets", "assets").show_files_listing())
    )
    .bind(("127.0.0.1", port))?
    .run()
    .await;
}