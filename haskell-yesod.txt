

#-# stack.yaml
resolver:
  url: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/20/26.yaml

packages:
- .

#-# app/main.hs
import Prelude     (IO)
import Application (appMain)

main :: IO ()
main = appMain


#-# .gitignore
dist*
static/tmp/
static/combined/
config/client_session_key.aes
*.hi
*.o
*.sqlite3
*.sqlite3-shm
*.sqlite3-wal
.hsenv*
cabal-dev/
.stack-work/
.stack-work-devel/
yesod-devel/
.cabal-sandbox
cabal.sandbox.config
.DS_Store
*.swp
*.keter
*~
\#*
haskell-yesod.cabal


#-# haskell-yesod.cabal
cabal-version: 1.12

-- This file has been generated from package.yaml by hpack version 0.36.0.
--
-- see: https://github.com/sol/hpack

name:           haskell-yesod
version:        0.0.0
build-type:     Simple

library
  exposed-modules:
      Application
      Foundation
      Settings
  other-modules:
      Paths_haskell_yesod
  hs-source-dirs:
      src
  build-depends:
      base >=4.9.1.0 && <5
    , classy-prelude ==1.5.*
    , classy-prelude-yesod ==1.5.*
    , hjsmin >=0.1 && <0.3
    , shakespeare ==2.0.*
    , template-haskell
    , text >=0.11 && <2.0
    , warp >=3.0 && <3.4
    , yesod ==1.6.*
    , yesod-core ==1.6.*
    , yesod-static ==1.6.*
  default-language: Haskell2010

executable haskell-yesod
  main-is: main.hs
  other-modules:
      Paths_haskell_yesod
  hs-source-dirs:
      app
  ghc-options: -threaded -rtsopts -with-rtsopts=-N
  build-depends:
      base >=4.9.1.0 && <5
    , classy-prelude ==1.5.*
    , classy-prelude-yesod ==1.5.*
    , haskell-yesod
    , hjsmin >=0.1 && <0.3
    , shakespeare ==2.0.*
    , template-haskell
    , text >=0.11 && <2.0
    , warp >=3.0 && <3.4
    , yesod ==1.6.*
    , yesod-core ==1.6.*
    , yesod-static ==1.6.*
  default-language: Haskell2010


#-# static/logo.svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 171 159.9" font-size="75" font-family="Helvetica">
  <path fill="#47d" d="m 112 77 m -81 -59.1 v 110.6 h 122 v -110.5 z m 117.3 105.9 h -112.5 v -101.2 h 112.5 z m -125.7 13.1 v -110.7 l -4.7 4.8 v 110.7 h 122 l 4.8 -4.8 z"/>
  <text fill="#888" x="37.5" y="95">&lt; &gt;</text>
  <text fill="#47d" x="81.5" y="101">/</text>
</svg>

#-# package.yaml
name:    haskell-yesod
version: "0.0.0"

dependencies:

- base >=4.9.1.0 && <5
- yesod >=1.6 && <1.7
- yesod-core >=1.6 && <1.7
- yesod-static >=1.6 && <1.7
- classy-prelude >=1.5 && <1.6
- classy-prelude-yesod >=1.5 && <1.6
- text >=0.11 && <2.0
- template-haskell
- shakespeare >=2.0 && <2.1
- hjsmin >=0.1 && <0.3
- warp >=3.0 && <3.4

library:
  source-dirs: src

# Runnable executable for our application
executables:
  haskell-yesod:
    main: main.hs
    source-dirs: app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - haskell-yesod

#-# templates/default-layout-wrapper.hamlet
$newline never

<head>
  <title>#{pageTitle pc}

  ^{pageHead pc}

^{pageBody pc}

#-# templates/default-layout.hamlet
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">

    <script src="https://htmx.org/js/htmx.js">
  <body>
  ^{widget}

  <div id="details" style="width: min(600px, 100%);margin: 10px auto;">

#-# templates/homepage.hamlet
<div .card>
  <img .wbg src="/static/logo.svg" height="150px" width="150px" alt="htmx logo">
  <div>
    <h4 style="margin: 0;">htmx / skill-issue (same thing)
    <p style="margin-bottom: 0;">
      htmx is a javascript library that
      allows you to access AJAX, WebSockets and Server
      Sent Events directly in
      HTML, using attributes

    <br>
    <button hx-get="/details" hx-swap="innerHTML" hx-target="#details"
      style="border-radius: 5px;background:#47d;color:#fff;border:0;padding: 7px;">Read More

#-# templates/homepage.lucius
body {
  font: 300 18px Helvetica;
}

.card {
  width: min(600px, calc(100% - 20px));
  background: linear-gradient(90deg, #ccc 0%, #eee 100%);
  display: flex;
  border-radius: 10px;
  padding: 15px;
  margin: 10px auto;
}

.wbg {
  background: #fff;
  border-radius: 10px;
  margin-right: 12px;
}

ul {
  list-style: none;
  padding: 0;
  display: flex;
  justify-content: space-around;
}

li {
  margin: 5px;
  padding: 7px;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  text-align: center;
  justify-content: space-between
}

li img {
  width: 100px;
  height: 100px;
  margin-bottom: 7px;
  border-radius: 50px;
}

#-# templates/details.hamlet
<h3 style="text-align:center;">Welcome to HTMX!
<p>You're using these tools, check their docs to learn more:
<ul>
    $forall (name, href, img) <- techs
        <li>
            <img src=#{img}>
            <a href="#{href}">#{name}

#-# src/routes.yesodroutes
-- By default this file is used by `parseRoutesFile` in Foundation.hs
-- Syntax for this file here: https://www.yesodweb.com/book/routing-and-handlers

/static StaticR Static appStatic
/ HomeR GET
/details DetailsR GET

#-# src/Settings.hs
{-# LANGUAGE CPP               #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE TemplateHaskell   #-}

module Settings where

import ClassyPrelude.Yesod
import Language.Haskell.TH.Syntax  (Exp, Q)
import Yesod.Default.Util          (widgetFileReload)

widgetFile :: String -> Q Exp
widgetFile = widgetFileReload def


#-# src/Application.hs
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}
module Application
    ( appMain, makeFoundation, handler)
where

import Foundation
import ClassyPrelude.Yesod   as Import
import Settings              as Import
import Network.Wai.Handler.Warp             (Settings, defaultSettings,
                                             runSettings, setHost,
                                             setOnException, setPort)

mkYesodDispatch "App" resourcesApp

makeFoundation :: IO App
makeFoundation = do
    appStatic <- staticDevel "static"
    return App {..}

warpSettings :: App -> Settings
warpSettings _ = setPort 3000 $ setHost "localhost" $ setOnException (\_req _e -> return ()) defaultSettings

appMain :: IO ()
appMain = do
    foundation <- makeFoundation
    app <- toWaiApp foundation
    runSettings (warpSettings foundation) app

getHomeR :: Handler Html
getHomeR = defaultLayout $ do
    setTitle "HTMX / Haskell (same-thing)"
    $(widgetFile "homepage")


techstack :: [(Text, Text, Text)]
techstack =
    [ ("Haskell", "https://www.haskell.org/", "https://upload.wikimedia.org/wikipedia/commons/1/1c/Haskell-Logo.svg")
    , ("HTMX", "https://htmx.org/", "https://htmx.org/img/htmx_logo.2.png")
    , ("Yesod", "https://www.yesodweb.com/", "https://yesodweb.com/static/logo-home2-no-esod.png")
    ]

getDetailsR :: Handler Html
getDetailsR = do
    let techs = techstack::[(Text, Text, Text)]
    defaultLayout $ do
        setTitle "HTMX / Haskell (same-thing)"
        $(widgetFile "details")

handler :: Handler a -> IO a
handler h = do
    foundation <- makeFoundation
    flip unsafeHandler h foundation

#-# src/Foundation.hs
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE InstanceSigs #-}

module Foundation where

import ClassyPrelude.Yesod   as Import
import Settings              as Import
import Text.Hamlet                 (hamletFile)
import Text.Jasmine                (minifym)
import Yesod.Default.Util          (addStaticContentExternal)
import qualified Yesod.Core.Unsafe as Unsafe

data App = App {
    appStatic      :: Static
}

mkYesodData "App" $(parseRoutesFile "src/routes.yesodroutes")

instance Yesod App where
    makeSessionBackend _ = return Nothing

    defaultLayout :: Widget -> Handler Html
    defaultLayout widget = do
        pc <- widgetToPageContent $ do
            $(widgetFile "default-layout")
        withUrlRenderer $(hamletFile "templates/default-layout-wrapper.hamlet")

    addStaticContent:: Text
        -> Text -- ^ The MIME content type
        -> LByteString -- ^ The contents of the file
        -> Handler (Maybe (Either Text (Route App, [(Text, Text)])))
    addStaticContent ext mime content = do
        addStaticContentExternal
            minifym
            genFileName
            "static"
            (StaticR . flip StaticRoute [])
            ext
            mime
            content
        where genFileName lbs = "autogen-" ++ base64md5 lbs

unsafeHandler :: App -> Handler a -> IO a
unsafeHandler = Unsafe.fakeHandlerGetLogger undefined
